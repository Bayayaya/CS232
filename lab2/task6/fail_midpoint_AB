a. x=1; y=-2147483648 to fail midpoint_A test.
I used x=1; y=-2147483648 to fail midpoint_A test. 
It failed because 1 is [0b0000 ... 0001] and -2147483648 is [0b1000 ... 0000] so the midpoint of 1 and -2147483648 is expected to be -1073741824 [0b1100 ... 0000]. However, midpoint_A failed because 
y-x => [0b1000 ... 0000 - 0b0000 ... 0001 = 0b0111 ... 1111] = 2147483647
(y-x)/2 => result from previous step shif to right by 1 digit = [0b0011 ... 1111]; positive 1073741823
x + ((y - x) / 2  => 1 + 1073741823 = 1073741824
Main reason for failure is the overflow.

b. x=1; y=-2147483648 to fail midpoint_B test.
I used x=1; y=-2147483648 to fail midpoint_B test. 
It failed because 1 is [0b0000 ... 0001] and -2147483648 is [0b1000 ... 0000] so the midpoint of 1 and -2147483648 is expected to be -1073741824 [0b1100 ... 0000]. However, midpoint_B failed because 
(unsigned int)x + (unsigned int)y => [0b0000 ... 0001] + [0b1000 ... 0000] = [0b1000 ... 0001]
((unsigned int)x + (unsigned int)y) >> 1 => right shift by 1 => [0b0100 ... 0000] = 1073741824
Main reason for failure is the sign digit didn't retain.

c. x=-1; y=-3 to fail midpoint_B test.
I used x=-1; y=-3 to fail midpoint_B test.
It failed because -1 is [0b1111 ... 1111] and -3 is [0b1111 ... 1101] so the midpoint of -1 and -3 is expected to be -2 [0b1111 ... 1110] . However midpoint_B failed because
(unsigned int)x + (unsigned int)y => [0b1111 ... 1111] + [0b1111 ... 1101] = [0b1111 ... 1100]
((unsigned int)x + (unsigned int)y) >> 1 => right shift by 1 => [0b0111 ... 1110] = 2147483646
Main reason for failure is the sign digit didn't retain.